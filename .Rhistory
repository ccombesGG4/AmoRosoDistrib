write.csv(MSE,"c:/BladderCancer/MSE.csv")
write.csv(Confidence.lower,"c:/BladderCancer/Confidence.lower.csv")
write.csv(Confidence.upper,"c:/BladderCancer/Confidence.upper.csv")
write.csv(IRQ,"c:/BladderCancer/IRQ.csv")
write.csv(MED,"c:/BladderCancer/MED.csv")
write.csv(CI,"c:/BladderCancer/CI.csv")
write.csv(init.theta.mle,"c:/BladderCancer/init.theta.mle.csv")
write.csv(init.theta.kl,"c:/BladderCancer/init.theta.kl.csv")
write.csv(init.theta.js,"c:/BladderCancer/init.theta.js.csv")
write.csv(init.theta.h,"c:/BladderCancer/init.theta.h.csv")
write.csv(init.theta.w,"c:/BladderCancer/init.theta.w.csv")
write.csv(init.theta.se,"c:/BladderCancer/init.theta.se.csv")
write.csv(init.theta.h.cfd,"c:/BladderCancer/init.theta.h.cfd.csv")
write.csv(init.theta.w.cfd,"c:/BladderCancer/init.theta.w.cfd.csv")
write.csv(init.theta.se.cfd,"c:/BladderCancer/init.theta.se.cfd.csv")
MED
library(AmoRosoDistrib)
#===================================================
# Data set: Bladder cancer (128 observations)
#===================================================
y = read.csv('c:/data/bladdercancer.csv')
head(y)
y = as.matrix(y)
head(y)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Histogram and density of the dataset
par(mfrow = c(1,1)) #plots
hist(y, col=5, prob=TRUE, ylim=c(0,0.15))
lines(density(y))
nrow(y)
summary(y)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
library(AmoRosoDistrib)
#==============================================
# To search the "best" parameters for initiate
#==============================================
#
#Parameter initialization: c(a,l,c,mu)
init.pos1 = init.theta(data = y, a.pos = TRUE, p = 0.99)
init.pos1
init.pos = init.pos1[1:4]
init.neg1 = init.theta(data = y, a.pos = FALSE, q = 1.01)
init.neg1
init.neg = init.neg1[1:4]
init.pos
init.neg
mleresp <- fit.mle(y, init.pos) # MLE pdf
mleresp
mleresn <- fit.mle(y, init.neg) # MLE pdf
mleresn
#========================================
##  Minimize K-L Divergence based on PDF
#========================================
mkleresp <- fit.mkle(y, init.pos) # Kullback-Leibler divergence pdf
mkleresp
mkleresn <- fit.mkle(y, init.neg) # Kullback-Leibler divergence pdf
mkleresn
#========================================
##  Minimize JSB Divergence based on PDF
#========================================
mjseresp <- fit.mjse(y, init.pos) # JSB divergence pdf
mjseresp
mjseresn <- fit.mjse(y, init.neg) # JSB divergence pdf
mjseresn
#======================================================================
##  Minimize Hellinger distance based on PDF
#======================================================================
mheresp <- fit.mhe(y, init.pos) # Hellinger distance pdf
mheresp
mheresn <- fit.mhe(y, init.neg) # Hellinger distance pdf
mheresn
#======================================================================
## Wasserstein minimum distance estimation (WMDE) based on PDF
#======================================================================
mWassderesp <- fit.mwe(y, init.pos, d = 4)     # Wass on pdf
mWassderesp
mWassderesn <- fit.mwe(y, init.neg, d = 4)     # Wass on pdf
mWassderesn
#=========================================
##  Minimize Squared Distance based on PDF
#=========================================
msqeresp <- fit.msqe(y, init.pos) # MSE pdf
msqeresp
msqeresn <- fit.msqe(y, init.neg) # MSE pdf
msqeresn
#===========================================
##  Minimize Hellinger distance based on CDF
#===========================================
mhecresp <- fit.mhdfe(y, init.pos) # Hellinger distance CDF
mhecresp
mhecresn <- fit.mhdfe(y, init.neg) # Hellinger distance CDF
mhecresn
#=============================================================
## Wasserstein minimum distance estimation (WMDE) based on CDF
#=============================================================
mwecresp <- fit.mwdfe(y, init.pos, d = 4)     # Wass on CDF
mwecresp
mwecresn <- fit.mwdfe(y, init.neg, d = 4)     # Wass on CDF
mwecresn
#=========================================
##  Minimize Squared Distance based on CDF
#=========================================
msqdferesp <- fit.msqdfe(y, init.pos) # MSE CDF
msqdferesp
msqdferesn <- fit.msqdfe(y, init.neg) # MSE CDF
msqdferesn
init.pos1
init.neg1
mleresp
mleresn
mkleresp
mkleresn
mjseresp
mjseresn
mheresp
mWassderesp
mWassderesn
msqdferesp
msqdferesn
hist(y, prob = T, ylim=c(0, 0.12), xlim = c(-10, 80), main = "Historgam and fitted PDFs of the Bladder Cancer Data (n = 128)")
#lines(density(y), xlim = (-0.5:0.2), lwd = 3, col = "red")
xx <- seq(-5, 80, length = 10000)
points(xx, dgg4(xx, init.pos[1], init.pos[2], init.pos[3], init.pos[4]), type = "l", lwd = 2, col = 1, lty = 1)
points(xx, dgg4(xx, init.neg[1], init.neg[2], init.neg[3], init.neg[4]), type = "l", lwd = 2, col = 1, lty = 2)
points(xx, dgg4(xx, mleresn$par[1], mleresn$par[2], mleresn$par[3], mleresn$par[4]), type = "l", lwd = 2, col = 2, lty = 1)
points(xx, dgg4(xx, mkleresp$par[1], mkleresp$par[2], mkleresp$par[3], mkleresp$par[4]), type = "l", lwd = 2, col = 3, lty = 1)
points(xx, dgg4(xx, mjseresp$par[1], mjseresp$par[2], mjseresp$par[3], mjseresp$par[4]), type = "l", lwd = 2, col = 4, lty = 1)
points(xx, dgg4(xx, mheresp$par[1], mheresp$par[2], mheresp$par[3], mheresp$par[4]), type = "l", lwd = 2, col = 5, lty = 1)
points(xx, dgg4(xx, mWassderesn$par[1], mWassderesn$par[2], mWassderesn$par[3], mWassderesn$par[4]), type = "l", lwd = 2, col = 6, lty = 1)
points(xx, dgg4(xx, msqeresn$par[1], msqeresn$par[2], msqeresn$par[3], msqeresn$par[4]), type = "l", lwd = 2, col = 7, lty = 1)
points(xx, dgg4(xx, mhecresp$par[1], mhecresp$par[2], mhecresp$par[3], mhecresp$par[4]), type = "l", lwd = 2, col = 5, lty = 2)
points(xx, dgg4(xx, mwecresp$par[1], mwecresp$par[2], mwecresp$par[3], mwecresp$par[4]), type = "l", lwd = 2, col = 6, lty = 2)
points(xx, dgg4(xx, msqdferesp$par[1], msqdferesp$par[2], msqdferesp$par[3], msqdferesp$par[4]), type = "l", lwd = 2, col = 7, lty = 2)
legend("topright", legend = c("Initial Est.(+)", "Initial Est.(-)",
"MLE", "MDE-KL", "MDE-JSB", "MDE-HD", "MDE-WD", "MDE-SE", "MDE-HDC", "MDE-WDC", "MDE-SEC"),
lwd = 2,
col = c(1, 1, 2:7, 5:7),
lty = c(1, 2, rep(1, 6), 2, 2, 2))
box()
data("paulsen", package = "boot")
y = paulsen$y
length(y)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Histogram and density of the dataset
par(mfrow = c(1,1)) #plots
hist(y, col=5, prob=TRUE, ylim=c(0,0.15))
lines(density(y))
nrow(y)
summary(y)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
library(AmoRosoDistrib)
init.pos1 = init.theta(data = y, a.pos = TRUE, p = 0.99)
init.pos1
init.pos = init.pos1[1:4]
init.neg1 = init.theta(data = y, a.pos = FALSE, q = 1.01)
init.neg1
init.neg = init.neg1[1:4]
mleresp <- fit.mle(y, init.pos) # MLE pdf
mleresp
mleresn <- fit.mle(y, init.neg) # MLE pdf
mleresn
#========================================
##  Minimize K-L Divergence based on PDF
#========================================
mkleresp <- fit.mkle(y, init.pos) # Kullback-Leibler divergence pdf
mkleresp
mkleresn <- fit.mkle(y, init.neg) # Kullback-Leibler divergence pdf
mkleresn
#========================================
##  Minimize JSB Divergence based on PDF
#========================================
mjseresp <- fit.mjse(y, init.pos) # JSB divergence pdf
mjseresp
mjseresn <- fit.mjse(y, init.neg) # JSB divergence pdf
mjseresn
#======================================================================
##  Minimize Hellinger distance based on PDF
#======================================================================
mheresp <- fit.mhe(y, init.pos) # Hellinger distance pdf
mheresp
mheresn <- fit.mhe(y, init.neg) # Hellinger distance pdf
mheresn
#======================================================================
## Wasserstein minimum distance estimation (WMDE) based on PDF
#======================================================================
mWassderesp <- fit.mwe(y, init.pos, d = 4)     # Wass on pdf
mWassderesp
mWassderesn <- fit.mwe(y, init.neg, d = 4)     # Wass on pdf
mWassderesn
#=========================================
##  Minimize Squared Distance based on PDF
#=========================================
msqeresp <- fit.msqe(y, init.pos) # MSE pdf
msqeresp
msqeresn <- fit.msqe(y, init.neg) # MSE pdf
msqeresn
#===========================================
##  Minimize Hellinger distance based on CDF
#===========================================
mhecresp <- fit.mhdfe(y, init.pos) # Hellinger distance CDF
mhecresp
mhecresn <- fit.mhdfe(y, init.neg) # Hellinger distance CDF
mhecresn
#=============================================================
## Wasserstein minimum distance estimation (WMDE) based on CDF
#=============================================================
mwecresp <- fit.mwdfe(y, init.pos, d = 4)     # Wass on CDF
mwecresp
mwecresn <- fit.mwdfe(y, init.neg, d = 4)     # Wass on CDF
mwecresn
#=========================================
##  Minimize Squared Distance based on CDF
#=========================================
msqdferesp <- fit.msqdfe(y, init.pos) # MSE CDF
msqdferesp
msqdferesn <- fit.msqdfe(y, init.neg) # MSE CDF
msqdferesn
hist(y, prob = T, main = "Historgam and fitted PDFs of the Paulsen's Data (n = 346)")
#lines(density(y), xlim = (-0.2:0.2), lwd = 3, col = "red")
xx <- seq(2.3, 35, length = 10000)
points(xx, dgg4(xx, init.pos[1], init.pos[2], init.pos[3], init.pos[4]), type = "l", lwd = 2, col = 1, lty = 1)
points(xx, dgg4(xx, init.neg[1], init.neg[2], init.neg[3], init.neg[4]), type = "l", lwd = 2, col = 1, lty = 2)
points(xx, dgg4(xx, mleresn$par[1], mleresn$par[2], mleresn$par[3], mleresn$par[4]), type = "l", lwd = 2, col = 2, lty = 1)
points(xx, dgg4(xx, mkleresn$par[1], mkleresn$par[2], mkleresn$par[3], mkleresn$par[4]), type = "l", lwd = 2, col = 3, lty = 1)
points(xx, dgg4(xx, mjseresn$par[1], mjseresn$par[2], mjseresn$par[3], mjseresn$par[4]), type = "l", lwd = 2, col = 4, lty = 1)
points(xx, dgg4(xx, mheresn$par[1], mheresn$par[2], mheresn$par[3], mheresn$par[4]), type = "l", lwd = 2, col = 5, lty = 1)
points(xx, dgg4(xx, mWassderesn$par[1], mWassderesn$par[2], mWassderesn$par[3], mWassderesn$par[4]), type = "l", lwd = 2, col = 6, lty = 1)
points(xx, dgg4(xx, msqeresn$par[1], msqeresn$par[2], msqeresn$par[3], msqeresn$par[4]), type = "l", lwd = 2, col = 7, lty = 1)
points(xx, dgg4(xx, mhecresp$par[1], mhecresp$par[2], mhecresp$par[3], mhecresp$par[4]), type = "l", lwd = 2, col = 5, lty = 2)
points(xx, dgg4(xx, mwecresn$par[1], mwecresn$par[2], mwecresn$par[3], mwecresn$par[4]), type = "l", lwd = 2, col = 6, lty = 2)
points(xx, dgg4(xx, msqdferesn$par[1], msqdferesn$par[2], msqdferesn$par[3], msqdferesn$par[4]), type = "l", lwd = 2, col = 7, lty = 2)
legend("topright", legend = c("Initial Est.(+)", "Initial Est.(-)",
"MLE", "MDE-KL", "MDE-JSB", "MDE-HD", "MDE-WD", "MDE-SE", "MDE-HDC", "MDE-WDC", "MDE-SEC"),
lwd = 2,
col = c(1, 1, 2:7, 5:7),
lty = c(1, 2, rep(1, 6), 2, 2, 2))
box()
#===================================================
# Data set: Bladder cancer (128 observations)
#===================================================
y = read.csv('c:/data/bladdercancer.csv')
head(y)
y = as.matrix(y)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Histogram and density of the dataset
par(mfrow = c(1,1)) #plots
hist(y, col=5, prob=TRUE, ylim=c(0,0.15))
lines(density(y))
nrow(y)
summary(y)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
library(AmoRosoDistrib)
init.pos1 = init.theta(data = y, a.pos = TRUE, p = 0.99)
init.pos1
init.pos = init.pos1[1:4]
init.neg1 = init.theta(data = y, a.pos = FALSE, q = 1.01)
init.neg1
init.neg = init.neg1[1:4]
#===============================================================================================
#                                        Estimation methods
#===============================================================================================
###############################################################################
# AmoRosoDistrib: fitting function for 4-parameter GG4 Ditrib (a >0 and a<0)
###############################################################################
#===================================
## MLE (Maximum Likelihood Estimate)
#===================================
mleresp <- fit.mle(y, init.pos) # MLE pdf
mleresp
mleresn <- fit.mle(y, init.neg) # MLE pdf
mleresn
#========================================
##  Minimize K-L Divergence based on PDF
#========================================
mkleresp <- fit.mkle(y, init.pos) # Kullback-Leibler divergence pdf
mkleresp
mkleresn <- fit.mkle(y, init.neg) # Kullback-Leibler divergence pdf
mkleresn
#========================================
##  Minimize JSB Divergence based on PDF
#========================================
mjseresp <- fit.mjse(y, init.pos) # JSB divergence pdf
mjseresp
mjseresn <- fit.mjse(y, init.neg) # JSB divergence pdf
mjseresn
#======================================================================
##  Minimize Hellinger distance based on PDF
#======================================================================
mheresp <- fit.mhe(y, init.pos) # Hellinger distance pdf
mheresp
mheresn <- fit.mhe(y, init.neg) # Hellinger distance pdf
mheresn
#======================================================================
## Wasserstein minimum distance estimation (WMDE) based on PDF
#======================================================================
mWassderesp <- fit.mwe(y, init.pos, d = 4)     # Wass on pdf
mWassderesp
mWassderesn <- fit.mwe(y, init.neg, d = 4)     # Wass on pdf
mWassderesn
#=========================================
##  Minimize Squared Distance based on PDF
#=========================================
msqeresp <- fit.msqe(y, init.pos) # MSE pdf
msqeresp
msqeresn <- fit.msqe(y, init.neg) # MSE pdf
msqeresn
#===========================================
##  Minimize Hellinger distance based on CDF
#===========================================
mhecresp <- fit.mhdfe(y, init.pos) # Hellinger distance CDF
mhecresp
mhecresn <- fit.mhdfe(y, init.neg) # Hellinger distance CDF
mhecresn
#=============================================================
## Wasserstein minimum distance estimation (WMDE) based on CDF
#=============================================================
mwecresp <- fit.mwdfe(y, init.pos, d = 4)     # Wass on CDF
mwecresp
mwecresn <- fit.mwdfe(y, init.neg, d = 4)     # Wass on CDF
mwecresn
#=========================================
##  Minimize Squared Distance based on CDF
#=========================================
msqdferesp <- fit.msqdfe(y, init.pos) # MSE CDF
msqdferesp
msqdferesn <- fit.msqdfe(y, init.neg) # MSE CDF
msqdferesn
hist(y, prob = T, ylim=c(0, 0.12), xlim = c(-10, 80), main = "Historgam and fitted PDFs of the Bladder Cancer Data (n = 128)")
#lines(density(y), xlim = (-0.5:0.2), lwd = 3, col = "red")
xx <- seq(-5, 80, length = 10000)
points(xx, dgg4(xx, init.pos[1], init.pos[2], init.pos[3], init.pos[4]), type = "l", lwd = 2, col = 1, lty = 1)
points(xx, dgg4(xx, init.neg[1], init.neg[2], init.neg[3], init.neg[4]), type = "l", lwd = 2, col = 1, lty = 2)
points(xx, dgg4(xx, mleresn$par[1], mleresn$par[2], mleresn$par[3], mleresn$par[4]), type = "l", lwd = 2, col = 2, lty = 1)
points(xx, dgg4(xx, mkleresp$par[1], mkleresp$par[2], mkleresp$par[3], mkleresp$par[4]), type = "l", lwd = 2, col = 3, lty = 1)
points(xx, dgg4(xx, mjseresp$par[1], mjseresp$par[2], mjseresp$par[3], mjseresp$par[4]), type = "l", lwd = 2, col = 4, lty = 1)
points(xx, dgg4(xx, mheresp$par[1], mheresp$par[2], mheresp$par[3], mheresp$par[4]), type = "l", lwd = 2, col = 5, lty = 1)
points(xx, dgg4(xx, mWassderesn$par[1], mWassderesn$par[2], mWassderesn$par[3], mWassderesn$par[4]), type = "l", lwd = 2, col = 6, lty = 1)
points(xx, dgg4(xx, msqeresn$par[1], msqeresn$par[2], msqeresn$par[3], msqeresn$par[4]), type = "l", lwd = 2, col = 7, lty = 1)
points(xx, dgg4(xx, mhecresp$par[1], mhecresp$par[2], mhecresp$par[3], mhecresp$par[4]), type = "l", lwd = 2, col = 5, lty = 2)
points(xx, dgg4(xx, mwecresp$par[1], mwecresp$par[2], mwecresp$par[3], mwecresp$par[4]), type = "l", lwd = 2, col = 6, lty = 2)
hist(y, prob = T, ylim=c(0, 0.05), xlim = c(-10, 80), main = "Historgam and fitted PDFs of the Bladder Cancer Data (n = 128)")
#lines(density(y), xlim = (-0.5:0.2), lwd = 3, col = "red")
xx <- seq(-5, 80, length = 10000)
hist(y, prob = T, ylim=c(0, 0.15), xlim = c(-10, 80), main = "Historgam and fitted PDFs of the Bladder Cancer Data (n = 128)")
hist(y, prob = T, ylim=c(0, 0.10), xlim = c(-10, 80), main = "Historgam and fitted PDFs of the Bladder Cancer Data (n = 128)")
#lines(density(y), xlim = (-0.5:0.2), lwd = 3, col = "red")
xx <- seq(-5, 80, length = 10000)
points(xx, dgg4(xx, init.pos[1], init.pos[2], init.pos[3], init.pos[4]), type = "l", lwd = 2, col = 1, lty = 1)
points(xx, dgg4(xx, init.neg[1], init.neg[2], init.neg[3], init.neg[4]), type = "l", lwd = 2, col = 1, lty = 2)
hist(y, prob = T, ylim=c(0, 0.11), xlim = c(-10, 80), main = "Historgam and fitted PDFs of the Bladder Cancer Data (n = 128)")
#lines(density(y), xlim = (-0.5:0.2), lwd = 3, col = "red")
xx <- seq(-5, 80, length = 10000)
points(xx, dgg4(xx, init.pos[1], init.pos[2], init.pos[3], init.pos[4]), type = "l", lwd = 2, col = 1, lty = 1)
points(xx, dgg4(xx, init.neg[1], init.neg[2], init.neg[3], init.neg[4]), type = "l", lwd = 2, col = 1, lty = 2)
points(xx, dgg4(xx, mleresn$par[1], mleresn$par[2], mleresn$par[3], mleresn$par[4]), type = "l", lwd = 2, col = 2, lty = 1)
points(xx, dgg4(xx, mkleresp$par[1], mkleresp$par[2], mkleresp$par[3], mkleresp$par[4]), type = "l", lwd = 2, col = 3, lty = 1)
hist(y, prob = T, ylim=c(0, 0.115), xlim = c(-10, 80), main = "Historgam and fitted PDFs of the Bladder Cancer Data (n = 128)")
#lines(density(y), xlim = (-0.5:0.2), lwd = 3, col = "red")
xx <- seq(-5, 80, length = 10000)
points(xx, dgg4(xx, init.pos[1], init.pos[2], init.pos[3], init.pos[4]), type = "l", lwd = 2, col = 1, lty = 1)
points(xx, dgg4(xx, init.neg[1], init.neg[2], init.neg[3], init.neg[4]), type = "l", lwd = 2, col = 1, lty = 2)
points(xx, dgg4(xx, mleresn$par[1], mleresn$par[2], mleresn$par[3], mleresn$par[4]), type = "l", lwd = 2, col = 2, lty = 1)
points(xx, dgg4(xx, mkleresp$par[1], mkleresp$par[2], mkleresp$par[3], mkleresp$par[4]), type = "l", lwd = 2, col = 3, lty = 1)
points(xx, dgg4(xx, mjseresp$par[1], mjseresp$par[2], mjseresp$par[3], mjseresp$par[4]), type = "l", lwd = 2, col = 4, lty = 1)
points(xx, dgg4(xx, mheresp$par[1], mheresp$par[2], mheresp$par[3], mheresp$par[4]), type = "l", lwd = 2, col = 5, lty = 1)
points(xx, dgg4(xx, mWassderesn$par[1], mWassderesn$par[2], mWassderesn$par[3], mWassderesn$par[4]), type = "l", lwd = 2, col = 6, lty = 1)
points(xx, dgg4(xx, msqeresn$par[1], msqeresn$par[2], msqeresn$par[3], msqeresn$par[4]), type = "l", lwd = 2, col = 7, lty = 1)
points(xx, dgg4(xx, mhecresp$par[1], mhecresp$par[2], mhecresp$par[3], mhecresp$par[4]), type = "l", lwd = 2, col = 5, lty = 2)
points(xx, dgg4(xx, mwecresp$par[1], mwecresp$par[2], mwecresp$par[3], mwecresp$par[4]), type = "l", lwd = 2, col = 6, lty = 2)
points(xx, dgg4(xx, msqdferesp$par[1], msqdferesp$par[2], msqdferesp$par[3], msqdferesp$par[4]), type = "l", lwd = 2, col = 7, lty = 2)
legend("topright", legend = c("Initial Est.(+)", "Initial Est.(-)",
"MLE", "MDE-KL", "MDE-JSB", "MDE-HD", "MDE-WD", "MDE-SE", "MDE-HDC", "MDE-WDC", "MDE-SEC"),
lwd = 2,
col = c(1, 1, 2:7, 5:7),
lty = c(1, 2, rep(1, 6), 2, 2, 2))
box()
size = 72
M=2000
library(AmoRosoDistrib)
init.theta.mle <- matrix(data = 0, nrow = M, ncol = 5)
init.theta.kl <- matrix(data = 0, nrow = M, ncol = 5)
init.theta.js <- matrix(data = 0, nrow = M, ncol = 5)
init.theta.h <- matrix(data = 0, nrow = M, ncol = 5)
init.theta.w <- matrix(data = 0, nrow = M, ncol = 5)
init.theta.se <- matrix(data = 0, nrow = M, ncol = 5)
init.theta.se.cfd <- matrix(data = 0, nrow = M, ncol = 5)
init.theta.w.cfd <- matrix(data = 0, nrow = M, ncol = 5)
init.theta.h.cfd <- matrix(data = 0, nrow = M, ncol = 5)
init.theta <- matrix(data = 0, nrow = M, ncol = 5)
theta.mleres  <- matrix(data = 0, nrow = M, ncol = 5)
theta.mkleres <- matrix(data = 0, nrow = M, ncol = 5)
theta.mjseres <- matrix(data = 0, nrow = M, ncol = 5)
theta.mheres  <- matrix(data = 0, nrow = M, ncol = 5)
theta.mWassderes <- matrix(data = 0, nrow = M, ncol = 5)
theta.msqeres <- matrix(data = 0, nrow = M, ncol = 5)
theta.mhecres <- matrix(data = 0, nrow = M, ncol = 5)
theta.mwecres <- matrix(data = 0, nrow = M, ncol = 5)
theta.msqdferes <- matrix(data = 0, nrow = M, ncol = 5)
MSE = matrix(data=NA,9,4)
IRQ = matrix(data=NA,9,4)
MED = matrix(data=NA,9,4)
Confidence.lower = matrix(data=NA,nrow = 9,ncol = 4)
Confidence.upper = matrix(data=NA,nrow = 9,ncol = 4)
# MLE:
a =26.38376
l = 0.26558
c = 4.46531
mu = 71.20407
set.seed(1)
for (j in 1:M) {
print(j)
y <- rgg4(size,a,l,c,mu,sequence = F)
#MyData[,j] <- y
init<- init.theta(data = y, a.pos = TRUE, p = 0.99)
#init <- init.theta(data = y, a.pos = FALSE, q = 1.01)
init.theta.mle[j,1:4] <- init[1:4]
init.theta.mle[j,5] <- init[5]
mleres  <- fit.mle(y, init[1:4]) # MLE pdf
theta.mleres[j,1:4] <- mleres$par
theta.mleres[j,5] <- mleres$value
print("end mle")
}
theta.star = theta.mleres[1:M,]
theta.star
summary(theta.star)
################################################################################
row.has.na <- apply(theta.star,1,function(x){any(is.na(x))})
theta.star <- theta.star[!row.has.na,]
nrow(theta.star)
################################################################################
nboot = nrow(theta.star)
a.star = theta.star[,1]
l.star = theta.star[,2]
c.star = theta.star[,3]
mu.star = theta.star[,4]
square_error_a = sd(a.star)
square_error_l = sd(l.star)
square_error_c = sd(c.star)
square_error_mu = sd(mu.star)
MSE_theta = c(square_error_a,
square_error_l,
square_error_c,
square_error_mu)
MSE_theta
# confidenceinterval
#For the bootstrap confidence interval,
#suppose we use B = 500 and confidence level 95%, then we have
#[B*0.025] = 12 and [B*0.975] = 487.
#Then, the R code to obtain the lower and upper limits of a 95% confidence interval for "a" is
lower.limit = round(nboot*0.25,0)
upper.limit = round(nboot*0.975,0)
c.lower = (sort(c.star))[lower.limit]
c.upper = (sort(c.star))[upper.limit]
c.lower
c.upper
par(mfrow = c(1,1)) #plots
hist(c.star, col=5, prob=TRUE, ylim=c(0,0.15))
hist(c.star, col=5, prob=TRUE, ylim=c(0,0.0015))
lines(density(c.star))
nrow(c.star)
c.star
write.csv(theta.mleres,"c:/Anorexia/theta.mleres.csv")
size = 72
M=2000
library(AmoRosoDistrib)
init.theta.mle <- matrix(data = 0, nrow = M, ncol = 5)
init.theta.kl <- matrix(data = 0, nrow = M, ncol = 5)
init.theta.js <- matrix(data = 0, nrow = M, ncol = 5)
init.theta.h <- matrix(data = 0, nrow = M, ncol = 5)
init.theta.w <- matrix(data = 0, nrow = M, ncol = 5)
init.theta.se <- matrix(data = 0, nrow = M, ncol = 5)
init.theta.se.cfd <- matrix(data = 0, nrow = M, ncol = 5)
init.theta.w.cfd <- matrix(data = 0, nrow = M, ncol = 5)
init.theta.h.cfd <- matrix(data = 0, nrow = M, ncol = 5)
init.theta <- matrix(data = 0, nrow = M, ncol = 5)
theta.mleres  <- matrix(data = 0, nrow = M, ncol = 5)
theta.mkleres <- matrix(data = 0, nrow = M, ncol = 5)
theta.mjseres <- matrix(data = 0, nrow = M, ncol = 5)
theta.mheres  <- matrix(data = 0, nrow = M, ncol = 5)
theta.mWassderes <- matrix(data = 0, nrow = M, ncol = 5)
theta.msqeres <- matrix(data = 0, nrow = M, ncol = 5)
theta.mhecres <- matrix(data = 0, nrow = M, ncol = 5)
theta.mwecres <- matrix(data = 0, nrow = M, ncol = 5)
theta.msqdferes <- matrix(data = 0, nrow = M, ncol = 5)
#MyData <- matrix(data = 0, nrow = size, ncol = M)
MSE = matrix(data=NA,9,4)
IRQ = matrix(data=NA,9,4)
MED = matrix(data=NA,9,4)
Confidence.lower = matrix(data=NA,nrow = 9,ncol = 4)
Confidence.upper = matrix(data=NA,nrow = 9,ncol = 4)
a = -31:70010
l = 0.10629
c = 15.44827
mu = 104.47086
a = -31:70010
l = 0.10629
c = 15.44827
mu = 104.47086
set.seed(1)
for (j in 1:M) {
print(j)
y <- rgg4(size,a,l,c,mu,sequence = F)
#MyData[,j] <- y
#init<- init.theta(data = y, a.pos = TRUE, p = 0.99)
init <- init.theta(data = y, a.pos = FALSE, q = 1.01)
init.theta.mle[j,1:4] <- init[1:4]
init.theta.mle[j,5] <- init[5]
mleres  <- fit.mle(y, init[1:4]) # MLE pdf
theta.mleres[j,1:4] <- mleres$par
theta.mleres[j,5] <- mleres$value
print("end mle")
}
